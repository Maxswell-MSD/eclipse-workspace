package view;

import java.awt.EventQueue;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import model.DAO;
import net.proteanit.sql.DbUtils;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Cliente extends JDialog {
	private JTextField txtIdCli;
	private JTextField txtCliente;
	private JTextField txtFoneCli;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Cliente dialog = new Cliente();
					dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
					dialog.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the dialog.
	 */
	public Cliente() {
		setTitle("InfoX - Clientes");
		setIconImage(Toolkit.getDefaultToolkit().getImage(Cliente.class.getResource("/img/pc2.png")));
		setResizable(false);
		setModal(true);
		setBounds(100, 100, 626, 374);
		getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Telefone");
		lblNewLabel.setBounds(351, 235, 67, 14);
		getContentPane().add(lblNewLabel);
		
		JLabel lblId = new JLabel("ID");
		lblId.setBounds(62, 199, 46, 14);
		getContentPane().add(lblId);
		
		JLabel lblNewLabel_1_1 = new JLabel("Nome");
		lblNewLabel_1_1.setBounds(62, 235, 46, 14);
		getContentPane().add(lblNewLabel_1_1);
		
		txtIdCli = new JTextField();
		txtIdCli.setBounds(118, 196, 86, 20);
		getContentPane().add(txtIdCli);
		txtIdCli.setColumns(10);
		
		txtCliente = new JTextField();
		txtCliente.setColumns(10);
		txtCliente.setBounds(121, 232, 188, 20);
		getContentPane().add(txtCliente);
		
		txtFoneCli = new JTextField();
		txtFoneCli.setColumns(10);
		txtFoneCli.setBounds(428, 232, 109, 20);
		getContentPane().add(txtFoneCli);
		
		JButton btnAdicionarCliente = new JButton("Adicionar");
		btnAdicionarCliente.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			 adicionarCliente();
				
			}
		});
		btnAdicionarCliente.setBounds(118, 285, 89, 23);
		getContentPane().add(btnAdicionarCliente);
		
		txtPesquisar = new JTextField();
		txtPesquisar.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				//evento de pesquisa do google de sugestoes de nomes de forma automatica
				pesquisarCliente();
			}
		});
		txtPesquisar.setBounds(20, 23, 197, 20);
		getContentPane().add(txtPesquisar);
		txtPesquisar.setColumns(10);
		
		JButton btnNewButton = new JButton("");
		btnNewButton.setIcon(new ImageIcon(Cliente.class.getResource("/img/pesquisar.png")));
		btnNewButton.setBounds(233, 11, 32, 32);
		getContentPane().add(btnNewButton);
		
		JDesktopPane desktopPane = new JDesktopPane();
		desktopPane.setBounds(46, 67, 532, 108);
		getContentPane().add(desktopPane);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(0, 0, 532, 108);
		desktopPane.add(scrollPane);
		
		tableCliente = new JTable();
		tableCliente.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				// Gerando evento em cursor do mouser ser direcionado para lista de cadastrados e fara o preenchiemto dos campos
				setarCampos();
			}
		});
		scrollPane.setViewportView(tableCliente);
		
		JButton btnEditarCliente = new JButton("Editar");
		btnEditarCliente.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// Criando evento de editar cliente
				editarCliente();
			}
		});
		btnEditarCliente.setBounds(257, 285, 89, 23);
		getContentPane().add(btnEditarCliente);
		
		JButton btnExcluirCliente = new JButton("Excluir");
		btnExcluirCliente.setBounds(385, 285, 89, 23);
		getContentPane().add(btnExcluirCliente);

	}
	// fim do construtor importe a classe DAO crtl + shift + o


	// criar objeto para reutilizar a classe DAO(Conexao com o banco)
	DAO dao = new DAO();
	private JTextField txtPesquisar;
	private JTable tableCliente;
	//metodo para inserir um novo cliente
	private void adicionarCliente() {
	//validacao dos campos obrigatorios
	if (txtCliente.getText().isEmpty()) {
	JOptionPane.showMessageDialog(null, "Preencha o nome do cliente ");
	txtCliente.requestFocus();
	} else if (txtFoneCli.getText().isEmpty()) {
	JOptionPane.showMessageDialog(null, "Preencha o fone do cliente ");
	txtFoneCli.requestFocus();
	} else {
	// logica principal
	// String (query) SQL
	String create = "insert into clientes (nome,fone) values(?,?)";
	try {
	//abrir a conexao com o banco
	Connection con = dao.conectar();
	//preparar a conexao com a instrucao sql(query)
	PreparedStatement pst = con.prepareStatement(create);
	//substituir os parametros(?,?) pelo conteudo das caixas texto
	pst.setString(1, txtCliente.getText());
	pst.setString(2, txtFoneCli.getText());
	//executar a query confirmando a inclusao do cliente
	int confirma = pst.executeUpdate();
	if (confirma == 1) {
	JOptionPane.showMessageDialog(null, "Cliente adicionado com sucesso.");
	}
	//encerrar a conexao
	con.close();
	//limpar os campos
	limpar();
	} catch (Exception e) {
	System.out.println(e);
	}
	}
	}
	
	// Pesquisa avançada de clientes usando abiblioteca rs2xml
	
	private void pesquisarCliente() {

		String read = "select * from clientes where nome like ? order by nome";
		try {
		//abrir a conexao com o banco
		Connection con = dao.conectar();
		//preparar a query(instrucao sql) para pesquisar no banco
		PreparedStatement pst = con.prepareStatement(read);
		//substituir o parametro(?) Atencao ao % para completar a query
		pst.setString(1, txtPesquisar.getText() + "%");
		//obter os dados do banco (resultado)
		ResultSet rs = pst.executeQuery();
		//popular(preencher) a tabela com os dados do banco
		tableCliente.setModel(DbUtils.resultSetToTableModel(rs));
		
	} catch (Exception e) {
		System.out.println(e);
		}
	}
	// setar os campos do formulario com o conteudo da tabela assim que colocar o cursor do mouse sobre o id ele vai preencher os campos
	private void setarCampos() {
	int setar = tableCliente.getSelectedRow();
	//(setar, 0) 0 -> 1º campo da tabela | 1 -> 2º campo da tabela ...
	txtIdCli.setText(tableCliente.getModel().getValueAt(setar, 0).toString());
	txtCliente.setText(tableCliente.getModel().getValueAt(setar, 1).toString());
	txtFoneCli.setText(tableCliente.getModel().getValueAt(setar, 2).toString());
	}

	// EDITAR CLIENTE (CRUD Update) EDITAR CLIENTE CADASTRADO
		private void editarCliente() {
			// validacao dos campos obrigatorios
			if (txtCliente.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Preencha o nome do Cliente");
				txtCliente.requestFocus();
			} else if (txtFoneCli.getText().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Preencha o Login");
				txtFoneCli.requestFocus();
			} else {
				// instrucao sql para Editar usuario o mesmo comando que damos no sql para
				// Editar um usuário
				String update = "update clientes set nome=?,fone=? where idCli=?";
				try {
					// estabelecer uma conexao atraves da classe DAO que é responsável pela ligação
					// do sql abrindo a conexão
					Connection con = dao.conectar();
					// preparar a instrução sql PreparedStatement vai substituir (?) pelo conteúdo
					// cadastrado no sql cada
					PreparedStatement pst = con.prepareStatement(update);
					// substituir parametros setamos o 2 de acordo com a posição de cadastro de
					// usuário no sql (?)
					pst.setString(1, txtIdCli.getText());
					pst.setString(0, txtCliente.getText());
					pst.setString(2, txtFoneCli.getText());
					
					// exibir uma caixa de mensagem mostrando que o usuário foi editado com sucesso.
					int confirma = pst.executeUpdate();
					if (confirma == 1) {
						JOptionPane.showMessageDialog(null, "Dados do usuário alterado com Sucesso");
					}
					
					
					
					
					
					// criando acao limpar caixa de texto quando os dados forem cadastrado
					limpar();
					con.close();
					
				} catch (Exception e) {
					System.out.println(e);
				}
			}

		}

	
	
	
	//limpar os campos e gerenciar os botoes
	private void limpar() {
	txtCliente.setText(null);
	txtFoneCli.setText(null);
	}
}

